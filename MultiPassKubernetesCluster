
#multipass command to start instances
multipass launchkinetic --name control-plane --cpus 2 --disk 8G --memory 2G --network en0 --network name=en0 \\
&& multipass launchkinetic --name worker1 --cpus 2 --disk 8G --memory 2G --network en0 --network name=en0

#bash script for k8s installation
#!/bin/bash
#https://www.linuxtechi.com/install-kubernetes-on-ubuntu-22-04/

apt update
apt install net-tools

#add ip to hosts
tee /etc/hosts <<EOF
192.168.64.60 control-plane
192.168.64.61 worker1
EOF

#swap off
swapoff -a 
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

#containerd modules
tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
modprobe overlay 
modprobe br_netfilter 

#kubernetes config
tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
sysctl --system

#containerd install
apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates 
install -m 0755 -d /etc/apt/keyrings  
curl -fsSL https://download.docker.com/linux/ubuntu/gpg |  gpg --dearmor -o /etc/apt/keyrings/docker.gpg  
chmod a+r /etc/apt/keyrings/docker.gpg 
echo \
 "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
 "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  tee /etc/apt/sources.list.d/docker.list > /dev/null
apt update 
apt install -y containerd.io


#configure containerd to use systemd
containerd config default |  tee /etc/containerd/config.toml >/dev/null 2>&1 
sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml 
systemctl restart containerd 
systemctl enable containerd

#kubernetes install
curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg 
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" |  tee /etc/apt/sources.list.d/kubernetes.list 
apt-get update 
apt-get install -y kubelet kubeadm kubectl 
apt-mark hold kubelet kubeadm kubectl

#stop here for worker

#init
kubeadm init --control-plane-endpoint=control-plane

#create kubeconfig
mkdir -p $HOME/.kube 
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config 
chown $(id -u):$(id -g) $HOME/.kube/config

#calico 
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

#check
kubectl cluster-info
#kubectl get nodes

